name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Check formatting
        run: pnpm format --check

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: empora_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma clients
        run: |
          cd apps/backend/auth-service && npx prisma generate
          cd ../product-service && npx prisma generate

      - name: Run Prisma migrations - Auth Service
        working-directory: apps/backend/auth-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
        run: npx prisma migrate deploy

      - name: Run Prisma migrations - Product Service
        working-directory: apps/backend/product-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
        run: npx prisma migrate deploy

      - name: Run tests - Auth Service
        working-directory: apps/backend/auth-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: pnpm test

      - name: Run tests - Product Service
        working-directory: apps/backend/product-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: pnpm test

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        working-directory: apps/frontend
        run: pnpm test

      - name: Generate coverage report
        working-directory: apps/frontend
        run: pnpm test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: empora_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Generate Prisma clients
        run: |
          cd apps/backend/auth-service && npx prisma generate
          cd ../product-service && npx prisma generate

      - name: Setup database - Auth Service
        working-directory: apps/backend/auth-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
        run: npx prisma migrate deploy

      - name: Setup database - Product Service
        working-directory: apps/backend/product-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
        run: npx prisma migrate deploy

      - name: Build applications
        run: pnpm build

      - name: Start Auth Service
        working-directory: apps/backend/auth-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3002
        run: pnpm start &

      - name: Start Product Service
        working-directory: apps/backend/product-service
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/empora_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3003
        run: pnpm start &

      - name: Start API Gateway
        working-directory: apps/backend/gateway
        env:
          PORT: 3001
        run: pnpm start &

      - name: Start frontend
        working-directory: apps/frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
        run: pnpm start &

      - name: Wait for services
        run: |
          npx wait-on http://localhost:3000 http://localhost:3001/api/v1/health --timeout 60000

      - name: Run Playwright tests
        run: pnpm test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=moderate

      - name: Check for secrets (PR)
        if: github.event_name == 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}

      - name: Check for secrets (Push)
        if: github.event_name == 'push'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --since-commit ${{ github.event.before }} --only-verified

  build:
    name: Build Check
    needs: [lint, backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma clients
        run: |
          cd apps/backend/auth-service && npx prisma generate
          cd ../product-service && npx prisma generate

      - name: Build all applications
        run: pnpm build

      - name: Check bundle size
        working-directory: apps/frontend
        run: |
          SIZE=$(du -sh .next | cut -f1)
          echo "Bundle size: $SIZE"
